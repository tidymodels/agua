[{"path":[]},{"path":"https://agua.tidymodels.org/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://agua.tidymodels.org/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://agua.tidymodels.org/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://agua.tidymodels.org/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://agua.tidymodels.org/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://agua.tidymodels.org/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://agua.tidymodels.org/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://agua.tidymodels.org/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://agua.tidymodels.org/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://agua.tidymodels.org/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://agua.tidymodels.org/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://agua.tidymodels.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 agua authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://agua.tidymodels.org/articles/agua.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to agua","text":"agua package provides tidymodels interface H2O platform h2o R package. two main components new parsnip engine 'h2o' following models: linear_reg(), logistic_reg(), poisson_reg(), multinom_reg(): fit penalized generalized linear models. model parameters penalty mixture specified, h2o internally search optimal regularization settings. boost_tree(): . Fits boosted trees via xgboost. Use h2o::h2o.xgboost.available() see h2o’s xgboost supported machine. classical gradient boosting, use 'h2o_gbm' engine. rand_forest(): Random forest models. naive_Bayes(): Naive Bayes models. rule_fit(): RuleFit models. mlp(): Multi-layer feedforward neural networks. auto_ml(): Automatic machine learning. Infrastructure tune package, see Tuning agua details. supported models can accept additional engine argument validation, number 0 1 specifying proportion data reserved validation set. can used h2o performance assessment potential early stopping.","code":""},{"path":"https://agua.tidymodels.org/articles/agua.html","id":"fitting-models-with-the-h2o-engine","dir":"Articles","previous_headings":"","what":"Fitting models with the 'h2o' engine","title":"Introduction to agua","text":"example, fit random forest model concrete data. regression model outcome compressive strength concrete mixtures. Note need call h2o_start() h2o::h2o.init() start h2o instance. h2o server handles computations related estimation prediction, passes results back R. agua takes care data conversion error handling, also tries store least objects server possible. h2o server automatically terminate R session closed. can use h2o::h2o.removeAll() remove server-side objects h2o::h2o.shutdown() manually stop server. rest syntax model fitting prediction identical usage engine tidymodels. , specify engine argument histogram_type = \"Random\" use extremely randomized trees (XRT) algorithm. available engine arguments, consult engine specific help page “h2o” model. instance, h2o link help page rand_forest() shows uses h2o::h2o.randomForest(), whose arguments can passed engine arguments set_engine(). can also use fit_resamples() h2o models. Variable importance scores can visualized vip package.","code":"library(tidymodels) library(agua) library(ggplot2) tidymodels_prefer() theme_set(theme_bw())  # start h2o server h2o_start()  data(concrete, package = \"modeldata\") concrete <-   concrete %>%   group_by(across(-compressive_strength)) %>%   summarize(compressive_strength = mean(compressive_strength),             .groups = \"drop\")  concrete #> # A tibble: 992 × 9 #>    cement blast_furn…¹ fly_ash water super…² coars…³ fine_…⁴   age compr…⁵ #>     <dbl>        <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl> <int>   <dbl> #>  1   102          153        0  192        0    887     942      3    4.57 #>  2   102          153        0  192        0    887     942      7    7.68 #>  3   102          153        0  192        0    887     942     28   17.3  #>  4   102          153        0  192        0    887     942     90   25.5  #>  5   108.         162.       0  204.       0    938.    849      3    2.33 #>  6   108.         162.       0  204.       0    938.    849      7    7.72 #>  7   108.         162.       0  204.       0    938.    849     28   20.6  #>  8   108.         162.       0  204.       0    938.    849     90   29.2  #>  9   116          173        0  192        0    910.    892.     3    6.28 #> 10   116          173        0  192        0    910.    892.     7   10.1  #> # … with 982 more rows, and abbreviated variable names #> #   ¹​blast_furnace_slag, ²​superplasticizer, ³​coarse_aggregate, #> #   ⁴​fine_aggregate, ⁵​compressive_strength set.seed(1501) concrete_split <- initial_split(concrete, strata = compressive_strength) concrete_train <- training(concrete_split) concrete_test  <- testing(concrete_split)  rf_spec <- rand_forest(mtry = 3, trees = 500) %>%   set_engine(\"h2o\", histogram_type = \"Random\") %>%    set_mode(\"regression\")  normalized_rec <-   recipe(compressive_strength ~ ., data = concrete_train) %>%   step_normalize(all_predictors())  rf_wflow <- workflow() %>%    add_model(rf_spec) %>%   add_recipe(normalized_rec)    rf_fit <- fit(rf_wflow, data = concrete_train) rf_fit #> ══ Workflow [trained] ════════════════════════════════════════════════════ #> Preprocessor: Recipe #> Model: rand_forest() #>  #> ── Preprocessor ────────────────────────────────────────────────────────── #> 1 Recipe Step #>  #> • step_normalize() #>  #> ── Model ───────────────────────────────────────────────────────────────── #> Model Details: #> ============== #>  #> H2ORegressionModel: drf #> Model ID:  DRF_model_R_1665503649643_6  #> Model Summary:  #>   number_of_trees number_of_internal_trees model_size_in_bytes min_depth #> 1             500                      500             2652880        15 #>   max_depth mean_depth min_leaves max_leaves mean_leaves #> 1        20   17.97600        375        450   417.48000 #>  #>  #> H2ORegressionMetrics: drf #> ** Reported on training data. ** #> ** Metrics reported on Out-Of-Bag training samples ** #>  #> MSE:  26.5 #> RMSE:  5.15 #> MAE:  3.7 #> RMSLE:  0.169 #> Mean Residual Deviance :  26.5 predict(rf_fit, new_data = concrete_test) #> # A tibble: 249 × 1 #>    .pred #>    <dbl> #>  1  6.42 #>  2  9.54 #>  3  9.20 #>  4 25.5  #>  5  6.60 #>  6 28.6  #>  7 10.0  #>  8 31.9  #>  9 12.1  #> 10 11.4  #> # … with 239 more rows concrete_folds <-   vfold_cv(concrete_train, strata = compressive_strength)  fit_resamples(rf_wflow, resamples = concrete_folds) #> # Resampling results #> # 10-fold cross-validation using stratification  #> # A tibble: 10 × 4 #>    splits           id     .metrics         .notes           #>    <list>           <chr>  <list>           <list>           #>  1 <split [667/76]> Fold01 <tibble [2 × 4]> <tibble [0 × 3]> #>  2 <split [667/76]> Fold02 <tibble [2 × 4]> <tibble [0 × 3]> #>  3 <split [667/76]> Fold03 <tibble [2 × 4]> <tibble [0 × 3]> #>  4 <split [667/76]> Fold04 <tibble [2 × 4]> <tibble [0 × 3]> #>  5 <split [667/76]> Fold05 <tibble [2 × 4]> <tibble [0 × 3]> #>  6 <split [668/75]> Fold06 <tibble [2 × 4]> <tibble [0 × 3]> #>  7 <split [671/72]> Fold07 <tibble [2 × 4]> <tibble [0 × 3]> #>  8 <split [671/72]> Fold08 <tibble [2 × 4]> <tibble [0 × 3]> #>  9 <split [671/72]> Fold09 <tibble [2 × 4]> <tibble [0 × 3]> #> 10 <split [671/72]> Fold10 <tibble [2 × 4]> <tibble [0 × 3]> library(vip)  rf_fit %>%    extract_fit_parsnip() %>%    vip()"},{"path":"https://agua.tidymodels.org/articles/auto_ml.html","id":"using-h2o-automl","dir":"Articles","previous_headings":"","what":"Using H2O AutoML","title":"Automatic machine learning","text":"Automatic machine learning (AutoML) process automatically searching, screening evaluating many models specific dataset. AutoML particularly insightful exploratory approach identify model families parameterization likely succeed. can use H2O’s AutoML algorithm via 'h2o' engine auto_ml(). agua provides several helper functions quickly wrangle visualize AutoML’s results. Let’s run AutoML search concrete data. 120 seconds, AutoML fitted 105 models. parsnip fit object extract_fit_parsnip(auto_fit) shows number candidate models, best performing algorithm corresponding model id, preview leaderboard cross validation performances. model_id column leaderboard unique model identifier h2o server. can useful need predict extract specific model, e.g. predict(auto_fit, id = id) extract_fit_engine(auto_fit, id = id). default, operate best performing leader model. Typically, use AutoML get quick sense range success metric, algorithms likely succeed. agua provides tools summarize results. rank_results() returns leaderboard tidy format rankings within metric. low rank means good performance metric. , top 5 models smallest MAE includes four stacked ensembles one GBM model. collect_metrics() returns average statistics performance metrics (summarized) per model, raw value resample (unsummarized). cv_id identifies resample h2o internally used optimization. tidy() returns tibble performance individual model objects. helpful want perform operations (e.g., predict) across candidates. member_weights() computes member importance stacked ensemble models. Aside base models GLM, GBM neural networks, h2o tries fit two kinds stacked ensembles: one combines base models (\"\") includes best model kind (\"bestofFamily\"), specific time point. Regardless ensembles formed, can calculate variable importance ensemble importance score every member model, .e., relative contribution base models meta-learner. typically coefficient magnitude second-level GLM. way, addition inspecting model performances , can find promising candidates stacking needed. , show scaled contribution different algorithms stacked ensembles.  can also autoplot() AutoML object, essentially wraps functions plot performance assessment ranking. lower average ranking, likely model type suits data.  initial assessment, might interested allow time AutoML search candidates. Recall set engine argument max_runtime_secs 120s , can increase adjust max_models control total runtime. H2O also provides option build upon existing AutoML leaderboard add candidates, can done via refit(). model re-fitted needs engine argument save_data = TRUE. also want add stacked ensembles set keep_cross_validation_predictions = TRUE well.","code":"library(tidymodels) library(agua) library(ggplot2) theme_set(theme_bw()) h2o_start() #> Warning: JAVA not found, H2O may take minutes trying to connect. #> Warning in h2o.clusterInfo():  #> Your H2O cluster version is (5 months and 15 days) old. There may be a newer version available. #> Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html data(concrete) set.seed(4595) concrete_split <- initial_split(concrete, strata = compressive_strength) concrete_train <- training(concrete_split) concrete_test <- testing(concrete_split)  # run for a maximum of 120 seconds auto_spec <-   auto_ml() %>%   set_engine(\"h2o\", max_runtime_secs = 120, seed = 1) %>%   set_mode(\"regression\")  normalized_rec <-   recipe(compressive_strength ~ ., data = concrete_train) %>%   step_normalize(all_predictors())  auto_wflow <-   workflow() %>%   add_model(auto_spec) %>%   add_recipe(normalized_rec)  auto_fit <- fit(auto_wflow, data = concrete_train) #> Warning in use.package(\"data.table\"): data.table cannot be used without R #> package bit64 version 0.9.7 or higher.  Please upgrade to take advangage #> of data.table speedups. extract_fit_parsnip(auto_fit) #> parsnip model object #>  #> ═════════════════════ H2O AutoML Summary: 105 models ═════════════════════  #>   #>   #> ═══════════════════════════════ Leaderboard ══════════════════════════════  #>                                                 model_id rmse  mse  mae #> 1 StackedEnsemble_BestOfFamily_4_AutoML_1_20240605_21232 4.51 20.4 3.00 #> 2    StackedEnsemble_AllModels_2_AutoML_1_20240605_21232 4.62 21.4 3.04 #> 3    StackedEnsemble_AllModels_1_AutoML_1_20240605_21232 4.67 21.8 3.08 #> 4 StackedEnsemble_BestOfFamily_3_AutoML_1_20240605_21232 4.68 21.9 3.08 #> 5 StackedEnsemble_BestOfFamily_2_AutoML_1_20240605_21232 4.71 22.2 3.16 #> 6                          GBM_5_AutoML_1_20240605_21232 4.75 22.6 3.14 #>   rmsle mean_residual_deviance #> 1 0.141                   20.4 #> 2 0.140                   21.4 #> 3 0.142                   21.8 #> 4 0.142                   21.9 #> 5 0.146                   22.2 #> 6 0.147                   22.6 # predict with the best model predict(auto_fit, new_data = concrete_test) #> Warning in use.package(\"data.table\"): data.table cannot be used without R #> package bit64 version 0.9.7 or higher.  Please upgrade to take advangage #> of data.table speedups. #> # A tibble: 260 × 1 #>    .pred #>    <dbl> #>  1  40.0 #>  2  43.0 #>  3  38.2 #>  4  55.7 #>  5  41.4 #>  6  28.1 #>  7  53.2 #>  8  34.5 #>  9  51.1 #> 10  37.9 #> # ℹ 250 more rows rank_results(auto_fit) %>%   filter(.metric == \"mae\") %>%   arrange(rank) #> # A tibble: 105 × 5 #>    id                                        algorithm .metric  mean  rank #>    <chr>                                     <chr>     <chr>   <dbl> <int> #>  1 StackedEnsemble_BestOfFamily_4_AutoML_1_… stacking  mae      3.00     1 #>  2 StackedEnsemble_AllModels_2_AutoML_1_202… stacking  mae      3.04     2 #>  3 StackedEnsemble_BestOfFamily_3_AutoML_1_… stacking  mae      3.08     3 #>  4 StackedEnsemble_AllModels_1_AutoML_1_202… stacking  mae      3.09     4 #>  5 XGBoost_grid_1_AutoML_1_20240605_21232_m… xgboost   mae      3.13     5 #>  6 XGBoost_grid_1_AutoML_1_20240605_21232_m… xgboost   mae      3.14     6 #>  7 GBM_5_AutoML_1_20240605_21232             gradient… mae      3.15     7 #>  8 StackedEnsemble_BestOfFamily_2_AutoML_1_… stacking  mae      3.17     8 #>  9 XGBoost_grid_1_AutoML_1_20240605_21232_m… xgboost   mae      3.18     9 #> 10 GBM_grid_1_AutoML_1_20240605_21232_model… gradient… mae      3.18    10 #> # ℹ 95 more rows collect_metrics(auto_fit, summarize = FALSE) #> # A tibble: 3,720 × 5 #>    id                                    algorithm .metric cv_id .estimate #>    <chr>                                 <chr>     <chr>   <chr>     <dbl> #>  1 StackedEnsemble_BestOfFamily_4_AutoM… stacking  mae     cv_1…      2.81 #>  2 StackedEnsemble_BestOfFamily_4_AutoM… stacking  mae     cv_2…      2.92 #>  3 StackedEnsemble_BestOfFamily_4_AutoM… stacking  mae     cv_3…      2.83 #>  4 StackedEnsemble_BestOfFamily_4_AutoM… stacking  mae     cv_4…      3.41 #>  5 StackedEnsemble_BestOfFamily_4_AutoM… stacking  mae     cv_5…      3.02 #>  6 StackedEnsemble_BestOfFamily_4_AutoM… stacking  mean_r… cv_1…     17.7  #>  7 StackedEnsemble_BestOfFamily_4_AutoM… stacking  mean_r… cv_2…     20.5  #>  8 StackedEnsemble_BestOfFamily_4_AutoM… stacking  mean_r… cv_3…     16.9  #>  9 StackedEnsemble_BestOfFamily_4_AutoM… stacking  mean_r… cv_4…     27.6  #> 10 StackedEnsemble_BestOfFamily_4_AutoM… stacking  mean_r… cv_5…     19.1  #> # ℹ 3,710 more rows tidy(auto_fit) %>%   mutate(     .predictions = map(.model, predict, new_data = head(concrete_test))   ) #> Warning: There were 105 warnings in `mutate()`. #> The first warning was: #> ℹ In argument: `.predictions = map(.model, predict, new_data = #>   head(concrete_test))`. #> Caused by warning in `use.package()`: #> ! data.table cannot be used without R package bit64 version 0.9.7 or higher.  Please upgrade to take advangage of data.table speedups. #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 104 remaining warnings. #> # A tibble: 105 × 5 #>    id                             algorithm .metric  .model   .predictions #>    <chr>                          <chr>     <list>   <list>   <list>       #>  1 StackedEnsemble_BestOfFamily_… stacking  <tibble> <fit[+]> <tibble>     #>  2 StackedEnsemble_AllModels_2_A… stacking  <tibble> <fit[+]> <tibble>     #>  3 StackedEnsemble_AllModels_1_A… stacking  <tibble> <fit[+]> <tibble>     #>  4 StackedEnsemble_BestOfFamily_… stacking  <tibble> <fit[+]> <tibble>     #>  5 StackedEnsemble_BestOfFamily_… stacking  <tibble> <fit[+]> <tibble>     #>  6 GBM_5_AutoML_1_20240605_21232  gradient… <tibble> <fit[+]> <tibble>     #>  7 GBM_grid_1_AutoML_1_20240605_… gradient… <tibble> <fit[+]> <tibble>     #>  8 XGBoost_grid_1_AutoML_1_20240… xgboost   <tibble> <fit[+]> <tibble>     #>  9 XGBoost_grid_1_AutoML_1_20240… xgboost   <tibble> <fit[+]> <tibble>     #> 10 GBM_3_AutoML_1_20240605_21232  gradient… <tibble> <fit[+]> <tibble>     #> # ℹ 95 more rows auto_fit %>%   extract_fit_parsnip() %>%   member_weights() %>%   unnest(importance) %>%   filter(type == \"scaled_importance\") %>%   ggplot() +   geom_boxplot(aes(value, algorithm)) +   scale_x_sqrt() +   labs(y = NULL, x = \"scaled importance\", title = \"Member importance in stacked ensembles\") autoplot(auto_fit, type = \"rank\", metric = c(\"mae\", \"rmse\")) +   theme(legend.position = \"none\") # not run  auto_spec_refit <-   auto_ml() %>%   set_engine(\"h2o\",               max_runtime_secs = 300,               save_data = TRUE,              keep_cross_validation_predictions = TRUE) %>%   set_mode(\"regression\")  auto_wflow_refit <-   workflow() %>%   add_model(auto_spec_refit) %>%   add_recipe(normalized_rec)  first_auto <- fit(auto_wflow_refit, data = concrete_train) # fit another 60 seconds  second_auto <- refit(first_auto, max_runtime_secs = 60)"},{"path":"https://agua.tidymodels.org/articles/auto_ml.html","id":"important-engine-arguments","dir":"Articles","previous_headings":"","what":"Important engine arguments","title":"Automatic machine learning","text":"several relevant engine arguments H2O AutoML, commonly used : max_runtime_secs max_models: Adjust runtime. include_algos exclude_algos: character vector naming algorithms include exclude. validation: integer 0 1 specifying proportion training data reserved validation set. used h2o performance assessment potential early stopping. See details section h2o::h2o.automl() information.","code":""},{"path":"https://agua.tidymodels.org/articles/auto_ml.html","id":"limiations","dir":"Articles","previous_headings":"","what":"Limiations","title":"Automatic machine learning","text":"One current limitation H2O AutoML models can’t used resampling. means can’t use fit_resamples(), tune_grid(), tune_bayes(), etc.","code":""},{"path":"https://agua.tidymodels.org/articles/parallel.html","id":"within-model-parallelization-with-h2o","dir":"Articles","previous_headings":"","what":"Within-model parallelization with h2o","title":"Parallel processing with agua and h2o","text":"using h2o directly, h2o.init() option called nthreads: (Optional) Number threads thread pool. relates closely number CPUs used. -1 means use CPUs host (Default). positive integer specifies number CPUs directly. value used R starts H2O. can use specify many resources used train model. control model--model basis, new tidymodels control argument called backend_options. grid search, first define many threads h2o server use: pass existing control functions: can used using grid search, racing, iterative search methods tidymodels.","code":"library(tidymodels) library(agua) library(finetune)  h2o_thread_spec <- agua_backend_options(parallelism = 10) grid_ctrl <- control_grid(backend_options = h2o_thread_spec)"},{"path":"https://agua.tidymodels.org/articles/parallel.html","id":"between-model-parallelization","dir":"Articles","previous_headings":"","what":"Between-model parallelization","title":"Parallel processing with agua and h2o","text":"model resampled tuned, evidence users parallelize longest running “loop” process. usually internal model operations (h2o parallelizes). See blog post wait finish, can interest parallel processing? example using xgboost. parallelize model tuning resampling operations, external tools like foreach result shorter computational times. ’ll focus foreach, since tidymodels currently uses. beginners, section Tidy Models R describes works. foreach, users load extension package doMC doParallel. former uses multicore technology work Windows. latter uses PSOCK clusters available operating systems. Let’s look .","code":""},{"path":"https://agua.tidymodels.org/articles/parallel.html","id":"multicore","dir":"Articles","previous_headings":"Between-model parallelization","what":"Multicore","title":"Parallel processing with agua and h2o","text":"get started, install doMC package register parallel backend. Using , agua send multiple model fits “worker processes” time seamlessly bring results back R session. worker processes created inherit much going R process. includes packages loaded well information h2o server. Basically, takes care background minutiae.","code":"available_cores <- parallel::detectCores()  library(doMC) registerDoMC(cores = available_cores)"},{"path":"https://agua.tidymodels.org/articles/parallel.html","id":"doparallel","dir":"Articles","previous_headings":"Between-model parallelization","what":"doParallel","title":"Parallel processing with agua and h2o","text":"PSOCK clusters usually higher maintenance users developers. start, cluster object created registered parallel backend: However, due clusters work, R processes start clean slate don’t know anything h2o server packages loaded. reason, need run code worker processes “prime pump”: return vector TRUE values everything appropriately setup. , can run tidymodels code usual.","code":"available_cores <- parallel::detectCores()  library(doParallel) cl <- makePSOCKcluster(available_cores) registerDoParallel(cl) check_workers_h2o <- function() {   library(h2o)   h2o.init()  #<- doesn't start a new server if you've already started one.    h2o.clusterIsUp() }  unlist(parallel::clusterCall(cl, check_workers_h2o))"},{"path":"https://agua.tidymodels.org/articles/parallel.html","id":"using-internal-and-external-methods-at-once","dir":"Articles","previous_headings":"","what":"Using internal and external methods at once","title":"Parallel processing with agua and h2o","text":"computing power, can employ within- -approaches. Just set nthreads option (agua backend) register parallel backend tool (e.g. doMC doParallel). worker processes send multiple chunks work h2o server time h2o server train models parallel .","code":""},{"path":"https://agua.tidymodels.org/articles/tune.html","id":"hyper-parameter-tuning-with-agua","dir":"Articles","previous_headings":"","what":"Hyper-parameter tuning with agua","title":"Model tuning","text":"agua sets infrastructure tune package enable optimization h2o models. Similar models, label hyperparameter tune() placeholder feed tune_*() functions tune_grid() tune_bayes(). Let’s go example Introduction tune Ames housing data. syntax , provide workflow grid hyperparameters, tune_grid() returns cross validation performances every parameterization per resample. 2 differences note tuning h2o models: call h2o_start() beforehand enable h2o side computations. can configure tuning h2o server supplying backend_options argument control_grid() agua_backend_options() object. Currently one supported argument, parallelism, specifies number models built parallel. example , tell h2o server build 5 models parallel. Note parallelism h2o server different parallel backend R doParallel. former parallelizes model parameters latter parameters preprocessor. See next section details. functions tune working tuning results collect_metrics(), collect_predictions() autoplot() also recognize ames_res work expected.","code":"library(tidymodels) library(agua) library(ggplot2) theme_set(theme_bw()) doParallel::registerDoParallel() h2o_start() #> Warning: JAVA not found, H2O may take minutes trying to connect. #> Warning in h2o.clusterInfo():  #> Your H2O cluster version is (5 months and 15 days) old. There may be a newer version available. #> Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html data(ames)  set.seed(4595) data_split <- ames %>%   mutate(Sale_Price = log10(Sale_Price)) %>%   initial_split(strata = Sale_Price) ames_train <- training(data_split) ames_test <- testing(data_split) cv_splits <- vfold_cv(ames_train, v = 10, strata = Sale_Price)  ames_rec <-   recipe(Sale_Price ~ Gr_Liv_Area + Longitude + Latitude, data = ames_train) %>%   step_log(Gr_Liv_Area, base = 10) %>%   step_ns(Longitude, deg_free = tune(\"long df\")) %>%   step_ns(Latitude, deg_free = tune(\"lat df\"))  lm_mod <- linear_reg(penalty = tune()) %>%   set_engine(\"h2o\")  lm_wflow <- workflow() %>%   add_model(lm_mod) %>%   add_recipe(ames_rec)  grid <- lm_wflow %>%   extract_parameter_set_dials() %>%   grid_regular(levels = 5)  ames_res <- tune_grid(   lm_wflow,   resamples = cv_splits,   grid = grid,   control = control_grid(save_pred = TRUE,     backend_options = agua_backend_options(parallelism = 5)) )  ames_res #> # Tuning results #> # 10-fold cross-validation using stratification  #> # A tibble: 10 × 5 #>    splits             id     .metrics           .notes   .predictions #>    <list>             <chr>  <list>             <list>   <list>       #>  1 <split [1976/221]> Fold01 <tibble [250 × 7]> <tibble> <tibble>     #>  2 <split [1976/221]> Fold02 <tibble [250 × 7]> <tibble> <tibble>     #>  3 <split [1976/221]> Fold03 <tibble [250 × 7]> <tibble> <tibble>     #>  4 <split [1976/221]> Fold04 <tibble [250 × 7]> <tibble> <tibble>     #>  5 <split [1977/220]> Fold05 <tibble [250 × 7]> <tibble> <tibble>     #>  6 <split [1977/220]> Fold06 <tibble [250 × 7]> <tibble> <tibble>     #>  7 <split [1978/219]> Fold07 <tibble [250 × 7]> <tibble> <tibble>     #>  8 <split [1978/219]> Fold08 <tibble [250 × 7]> <tibble> <tibble>     #>  9 <split [1979/218]> Fold09 <tibble [250 × 7]> <tibble> <tibble>     #> 10 <split [1980/217]> Fold10 <tibble [250 × 7]> <tibble> <tibble>     #>  #> There were issues with some computations: #>  #>   - Warning(s) x10: data.table cannot be used without R package bit64 version 0... #>  #> Run `show_notes(.Last.tune.result)` for more information. collect_metrics(ames_res, summarize = FALSE) #> # A tibble: 2,500 × 8 #>    id      penalty `long df` `lat df` .metric .estimator .estimate .config #>    <chr>     <dbl>     <int>    <int> <chr>   <chr>          <dbl> <chr>   #>  1 Fold01    1e-10         1        1 rmse    standard      0.115  Prepro… #>  2 Fold01    1e-10         1        1 rsq     standard      0.550  Prepro… #>  3 Fold02    1e-10         1        1 rmse    standard      0.112  Prepro… #>  4 Fold02    1e-10         1        1 rsq     standard      0.603  Prepro… #>  5 Fold03    1e-10         1        1 rmse    standard      0.116  Prepro… #>  6 Fold03    1e-10         1        1 rsq     standard      0.563  Prepro… #>  7 Fold04    1e-10         1        1 rmse    standard      0.112  Prepro… #>  8 Fold04    1e-10         1        1 rsq     standard      0.581  Prepro… #>  9 Fold05    1e-10         1        1 rmse    standard      0.0998 Prepro… #> 10 Fold05    1e-10         1        1 rsq     standard      0.637  Prepro… #> # ℹ 2,490 more rows autoplot(ames_res, metric = \"rmse\")"},{"path":"https://agua.tidymodels.org/articles/tune.html","id":"tuning-internals","dir":"Articles","previous_headings":"","what":"Tuning internals","title":"Model tuning","text":"users interested performance characteristics tuning h2o models agua, helpful know inner workings h2o. agua uses h2o::h2o.grid() function tuning model parameters, accepts list possible combinations search optimal one given dataset. example , three tuning parameters two types: tuning parameters model: penalty. tuning parameters preprocessor: long df lat df. can extracted extract_parameter_set_dials() Since h2o.grid responsible optimizing model parameters, preprocessor parameters long df lat df iterated usual R side (also reason can’t use agua control_grid(parallel_over = 'everything')). certain combination chosen, agua engineer relevant features pass data model definitions h2o_grid(). example, say choose preprocess parameters long df = 4 lat df = 1, analysis set one particular fold becomes data frame passing h2o server one iteration training. now completed computations R side rest delegated h2o server. preprocessor combination, 5 possible choices model parameter penalty option control_grid(backend_options = agua_backend_options(parallelism = 5)) tells h2o server build 5 models choices parallel. parallel backend R like doParallel registered, combinations long df lat df selected parallel, prepared analysis set. independent parallelism configured h2o server. Regarding performance model evaluation, h2o::h2o.grid() supports passing validation frame return predictions data. order compute metrics holdout sample, retrieve model, convert validation data desired format, predict , convert results back data frames. future hope get validation predictions directly thus eliminating excessive data conversions.","code":"extract_parameter_set_dials(lm_wflow) #> Collection of 3 parameters for tuning #>  #>  identifier     type    object #>     penalty  penalty nparam[+] #>     long df deg_free nparam[+] #>      lat df deg_free nparam[+] #> # A tibble: 1,976 × 7 #>    Gr_Liv_Area Sale_Price Longitude_ns_1 Longitude_ns_2 Longitude_ns_3 #>          <dbl>      <dbl>          <dbl>          <dbl>          <dbl> #>  1        2.95       5.02        0.238           0.564           0.211 #>  2        2.95       5.10        0.440           0.466           0.149 #>  3        3.04       5.02        0.452           0.457           0.145 #>  4        3.04       4.94        0.445           0.462           0.147 #>  5        2.96       5.00        0.00276        -0.0705          0.182 #>  6        3.01       4.83        0.0235         -0.134           0.347 #>  7        2.95       5.09        0.0787         -0.178           0.459 #>  8        3.02       5.10        0.109          -0.186           0.482 #>  9        3.09       5.11        0.330           0.532           0.180 #> 10        3.24       4.93        0.317           0.538           0.184 #> # ℹ 1,966 more rows #> # ℹ 2 more variables: Longitude_ns_4 <dbl>, Latitude_ns_1 <dbl> grid %>%   filter(`long df` == 4, `lat df` == 1) %>%   pull(penalty) #> [1] 1.00e-10 3.16e-08 1.00e-05 3.16e-03 1.00e+00"},{"path":"https://agua.tidymodels.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Max Kuhn. Author. Qiushi Yan. Author, maintainer. Steven Pawley. Author. . Copyright holder, funder.","code":""},{"path":"https://agua.tidymodels.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kuhn M, Yan Q, Pawley S (2024). agua: 'tidymodels' Integration 'h2o'. R package version 0.1.4,  https://github.com/tidymodels/agua, https://agua.tidymodels.org/.","code":"@Manual{,   title = {agua: 'tidymodels' Integration with 'h2o'},   author = {Max Kuhn and Qiushi Yan and Steven Pawley},   year = {2024},   note = {R package version 0.1.4,  https://github.com/tidymodels/agua},   url = {https://agua.tidymodels.org/}, }"},{"path":"https://agua.tidymodels.org/index.html","id":"agua-","dir":"","previous_headings":"","what":"tidymodels Integration with h2o","title":"tidymodels Integration with h2o","text":"agua enables users fit, optimize, evaluate models via H2O using tidymodels syntax. users use aqua directly; features can accessed via new parsnip computational engine 'h2o'. two main components agua: New parsnip engine 'h2o' many models, see Get started complete list. Infrastructure tune package. fitting parsnip model, data passed h2o server directly. tuning, data passed instructions given h2o.grid() process . work based @stevenpawley’s h2oparsnip package. Additional work done Qiushi Yan 2022 summer internship RStudio.","code":""},{"path":"https://agua.tidymodels.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"tidymodels Integration with h2o","text":"CRAN version package can installed via can also install development version agua using:","code":"install.packages(\"agua\") require(pak) pak::pak(\"tidymodels/agua\")"},{"path":"https://agua.tidymodels.org/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"tidymodels Integration with h2o","text":"following code demonstrates create single model h2o server make predictions. using 'h2o' engine, users need run agua::h2o_start() h2o::h2o.init() start h2o server, storing data, models, values passed R session. several package vignettes including: Introduction agua Model tuning Automatic machine learning Parallel processing agua h2o","code":"library(tidymodels) library(agua) library(h2o) tidymodels_prefer() # Start the h2o server before running models h2o_start()  # Demonstrate fitting parsnip models:  # Specify the type of model and the h2o engine  spec <-   rand_forest(mtry = 3, trees = 1000) %>%   set_engine(\"h2o\") %>%   set_mode(\"regression\")  # Fit the model on the h2o server set.seed(1) mod <- fit(spec, mpg ~ ., data = mtcars) mod #> parsnip model object #>  #> Model Details: #> ============== #>  #> H2ORegressionModel: drf #> Model ID:  DRF_model_R_1656520956148_1  #> Model Summary:  #>   number_of_trees number_of_internal_trees model_size_in_bytes min_depth #> 1            1000                     1000              285914         4 #>   max_depth mean_depth min_leaves max_leaves mean_leaves #> 1        10    6.70600         10         27    18.04100 #>  #>  #> H2ORegressionMetrics: drf #> ** Reported on training data. ** #> ** Metrics reported on Out-Of-Bag training samples ** #>  #> MSE:  4.354249 #> RMSE:  2.086684 #> MAE:  1.657823 #> RMSLE:  0.09848976 #> Mean Residual Deviance :  4.354249  # Predictions predict(mod, head(mtcars)) #> # A tibble: 6 × 1 #>   .pred #>   <dbl> #> 1  20.9 #> 2  20.8 #> 3  23.3 #> 4  20.4 #> 5  17.9 #> 6  18.7  # When done h2o_end()"},{"path":"https://agua.tidymodels.org/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"tidymodels Integration with h2o","text":"Please note agua project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://agua.tidymodels.org/reference/agua-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tidymodels integration with h2o — agua-package","title":"tidymodels integration with h2o — agua-package","text":"agua allows users fit tune models using H2O platform tidymodels syntax. package provides new parsnip computational engine 'h2o' various models sets additional infrastructure tune.","code":""},{"path":"https://agua.tidymodels.org/reference/agua-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"tidymodels integration with h2o — agua-package","text":"package uses code initially written Steven Pawley h2oparsnip package. Addition work done Qiushi Yan Posit summer intern. two main components agua: New parsnip engine 'h2o' many models, see vignette complete list. Infrastructure tune package. fitting parsnip model, data passed h2o server directly. tuning, data passed instructions given h2o.grid() process . work based @stevenpawley’s h2oparsnip package. Additional work done Qiushi Yan 2022 summer internship Posit.","code":""},{"path":"https://agua.tidymodels.org/reference/agua-package.html","id":"installation","dir":"Reference","previous_headings":"","what":"Installation","title":"tidymodels integration with h2o — agua-package","text":"CRAN version package can installed via   can also install development version agua using:","code":"install.packages(\"agua\") require(pak) pak::pak(\"tidymodels/agua\")"},{"path":"https://agua.tidymodels.org/reference/agua-package.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tidymodels integration with h2o — agua-package","text":"following code demonstrates create single model h2o server make predictions.   using 'h2o' engine, users need run agua::h2o_start() h2o::h2o.init() start h2o server, storing data, models, values passed R session. several package vignettes including: Introduction agua Model tuning Automatic machine learning Parallel processing agua h2o","code":"library(tidymodels) library(agua)  # Start the h2o server before running models h2o_start()  # Demonstrate fitting parsnip models:  # Specify the type of model and the h2o engine  spec <-   rand_forest(mtry = 3, trees = 1000) %>%   set_engine(\"h2o\") %>%   set_mode(\"regression\")  # Fit the model on the h2o server set.seed(1) mod <- fit(spec, mpg ~ ., data = mtcars) mod #> parsnip model object #>  #> Model Details: #> ============== #>  #> H2ORegressionModel: drf #> Model ID:  DRF_model_R_1665517828283_1  #> Model Summary:  #>   number_of_trees number_of_internal_trees model_size_in_bytes min_depth #> 1            1000                     1000              285916         4 #>   max_depth mean_depth min_leaves max_leaves mean_leaves #> 1        10    6.70600         10         27    18.04100 #>  #>  #> H2ORegressionMetrics: drf #> ** Reported on training data. ** #> ** Metrics reported on Out-Of-Bag training samples ** #>  #> MSE:  4.354 #> RMSE:  2.087 #> MAE:  1.658 #> RMSLE:  0.09849 #> Mean Residual Deviance :  4.354  # Predictions predict(mod, head(mtcars)) #> # A tibble: 6 × 1 #>   .pred #>   <dbl> #> 1  20.9 #> 2  20.8 #> 3  23.3 #> 4  20.4 #> 5  17.9 #> 6  18.7  # When done h2o_end()"},{"path":[]},{"path":"https://agua.tidymodels.org/reference/agua-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tidymodels integration with h2o — agua-package","text":"Maintainer: Qiushi Yan qiushi.yann@gmail.com Authors: Max Kuhn max@posit.co (ORCID) Steven Pawley dr.stevenpawley@gmail.com contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://agua.tidymodels.org/reference/as_h2o.html","id":null,"dir":"Reference","previous_headings":"","what":"Data conversion tools — as_h2o","title":"Data conversion tools — as_h2o","text":"Data conversion tools","code":""},{"path":"https://agua.tidymodels.org/reference/as_h2o.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data conversion tools — as_h2o","text":"","code":"as_h2o(df, destination_frame_prefix = \"object\")  # S3 method for H2OFrame as_tibble(   x,   ...,   .rows = NULL,   .name_repair = c(\"check_unique\", \"unique\", \"universal\", \"minimal\"),   rownames = pkgconfig::get_config(\"tibble::rownames\", NULL) )"},{"path":"https://agua.tidymodels.org/reference/as_h2o.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data conversion tools — as_h2o","text":"df R data frame. destination_frame_prefix character string use base name. x H2OFrame. ... Unused, extensibility. .rows number rows, useful create 0-column tibble just additional check. .name_repair Treatment problematic column names: \"minimal\": name repair checks, beyond basic existence, \"unique\": Make sure names unique empty, \"check_unique\": (default value), name repair, check unique, \"universal\": Make names unique syntactic function: apply custom name repair (e.g., .name_repair = make.names names style base R). purrr-style anonymous function, see rlang::as_function() argument passed repair vctrs::vec_as_names(). See details terms strategies used enforce . rownames treat existing row names data frame matrix: NULL: remove row names. default. NA: keep row names. string: name new column. Existing rownames transferred column row.names attribute deleted. name repair applied new column name, even x already contains column name. Use as_tibble(rownames_to_column(...)) safeguard case. Read rownames.","code":""},{"path":"https://agua.tidymodels.org/reference/as_h2o.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data conversion tools — as_h2o","text":"tibble , as_h2o(), list data (H2OFrame) id (id h2o server).","code":""},{"path":"https://agua.tidymodels.org/reference/as_h2o.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data conversion tools — as_h2o","text":"","code":"# start with h2o::h2o.init() if (h2o_running()) {   cars2 <- as_h2o(mtcars)   cars2   class(cars2$data)    cars0 <- as_tibble(cars2$data)   cars0 }"},{"path":"https://agua.tidymodels.org/reference/automl-autoplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot rankings and metrics of H2O AutoML results — autoplot.workflow","title":"Plot rankings and metrics of H2O AutoML results — autoplot.workflow","text":"autoplot() method plots cross validation performances candidate models H2O AutoML output via facets metric.","code":""},{"path":"https://agua.tidymodels.org/reference/automl-autoplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot rankings and metrics of H2O AutoML results — autoplot.workflow","text":"","code":"# S3 method for workflow autoplot(object, ...)  # S3 method for H2OAutoML autoplot(   object,   type = c(\"rank\", \"metric\"),   metric = NULL,   std_errs = qnorm(0.95),   ... )"},{"path":"https://agua.tidymodels.org/reference/automl-autoplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot rankings and metrics of H2O AutoML results — autoplot.workflow","text":"object fitted auto_ml() model. ... options pass autoplot(). type character value whether plot average ranking (\"rank\") metrics (\"metric\"). metric character vector NULL metric plot. default, metrics shown via facets. std_errs number standard errors plot.","code":""},{"path":"https://agua.tidymodels.org/reference/automl-autoplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot rankings and metrics of H2O AutoML results — autoplot.workflow","text":"ggplot object.","code":""},{"path":"https://agua.tidymodels.org/reference/automl-autoplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot rankings and metrics of H2O AutoML results — autoplot.workflow","text":"","code":"if (h2o_running()) {   auto_fit <- auto_ml() %>%     set_engine(\"h2o\", max_runtime_secs = 5) %>%     set_mode(\"regression\") %>%     fit(mpg ~ ., data = mtcars)    autoplot(auto_fit) }"},{"path":"https://agua.tidymodels.org/reference/automl-tools.html","id":null,"dir":"Reference","previous_headings":"","what":"Tools for working with H2O AutoML results — rank_results.workflow","title":"Tools for working with H2O AutoML results — rank_results.workflow","text":"Functions returns tibble describing model performances. rank_results() ranks average cross validation performances candidate models metric. collect_metrics() computes average statistics performance metrics (summarized) model, raw value resample (unsummarized). tidy() computes average performance model. member_weights() computes member importance stacked ensemble models, .e., relative importance base models meta-learner. typically coefficient magnitude second-level GLM model. extract_fit_engine() extracts single candidate model auto_ml() results. id null, returns leader model. refit() re-fits existing AutoML model add candidates. model re-fitted needs engine argument save_data = TRUE, keep_cross_validation_predictions = TRUE stacked ensembles needed later models.","code":""},{"path":"https://agua.tidymodels.org/reference/automl-tools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tools for working with H2O AutoML results — rank_results.workflow","text":"","code":"# S3 method for workflow rank_results(x, ...)  # S3 method for `_H2OAutoML` rank_results(x, ...)  # S3 method for H2OAutoML rank_results(x, n = NULL, id = NULL, ...)  # S3 method for workflow collect_metrics(x, ...)  # S3 method for `_H2OAutoML` collect_metrics(x, ...)  # S3 method for H2OAutoML collect_metrics(x, summarize = TRUE, n = NULL, id = NULL, ...)  # S3 method for `_H2OAutoML` tidy(x, n = NULL, id = NULL, keep_model = TRUE, ...)  get_leaderboard(x, n = NULL, id = NULL)  member_weights(x, ...)  # S3 method for `_H2OAutoML` extract_fit_parsnip(x, id = NULL, ...)  # S3 method for `_H2OAutoML` extract_fit_engine(x, id = NULL, ...)  # S3 method for workflow refit(object, ...)  # S3 method for `_H2OAutoML` refit(object, verbosity = NULL, ...)"},{"path":"https://agua.tidymodels.org/reference/automl-tools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tools for working with H2O AutoML results — rank_results.workflow","text":"... used. n integer number top models extract AutoML results, default . id character vector model ids retrieve. summarize logical; metrics summarized resamples (TRUE) return values individual resample. keep_model logical value actual model object retrieved server. Defaults TRUE. object, x fitted auto_ml() model workflow. verbosity Verbosity backend messages printed training; Must one NULL (live log disabled), \"debug\", \"info\", \"warn\", \"error\". Defaults NULL.","code":""},{"path":"https://agua.tidymodels.org/reference/automl-tools.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tools for working with H2O AutoML results — rank_results.workflow","text":"tibble::tibble().","code":""},{"path":"https://agua.tidymodels.org/reference/automl-tools.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tools for working with H2O AutoML results — rank_results.workflow","text":"H2O associates model AutoML unique id. can used model extraction prediction, .e., extract_fit_engine(x, id = id) returns model predict(x, id = id) predict model. extract_fit_parsnip(x, id = id) wraps h2o model parsnip parsnip model object discouraged. algorithm column corresponds model family H2O use particular model, including xgboost (\"XGBOOST\"), gradient boosting (\"GBM\"), random forest variants (\"DRF\", \"XRT\"), generalized linear model (\"GLM\"), neural network (\"deeplearning\"). See details section h2o::h2o.automl() information.","code":""},{"path":"https://agua.tidymodels.org/reference/automl-tools.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tools for working with H2O AutoML results — rank_results.workflow","text":"","code":"if (h2o_running()) {  auto_fit <- auto_ml() %>%    set_engine(\"h2o\", max_runtime_secs = 5) %>%    set_mode(\"regression\") %>%    fit(mpg ~ ., data = mtcars)     rank_results(auto_fit, n = 5)    collect_metrics(auto_fit, summarize = FALSE)    tidy(auto_fit)    member_weights(auto_fit) }"},{"path":"https://agua.tidymodels.org/reference/h2o-print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print wrappers for h2o models — print.h2o_fit","title":"Print wrappers for h2o models — print.h2o_fit","text":"Print wrappers h2o models","code":""},{"path":"https://agua.tidymodels.org/reference/h2o-print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print wrappers for h2o models — print.h2o_fit","text":"","code":"# S3 method for h2o_fit print(x, ...)  # S3 method for H2OAutoML_fit print(x, ...)  # S3 method for H2OAutoML print(x, ...)"},{"path":"https://agua.tidymodels.org/reference/h2o-server.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility functions for interacting with the h2o server — h2o_start","title":"Utility functions for interacting with the h2o server — h2o_start","text":"Utility functions interacting h2o server","code":""},{"path":"https://agua.tidymodels.org/reference/h2o-server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility functions for interacting with the h2o server — h2o_start","text":"","code":"h2o_start()  h2o_end()  h2o_running(verbose = FALSE)  h2o_remove(id)  h2o_remove_all()  h2o_get_model(id)  h2o_get_frame(id)  h2o_xgboost_available()"},{"path":"https://agua.tidymodels.org/reference/h2o-server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility functions for interacting with the h2o server — h2o_start","text":"verbose Print message cluster available. id Model frame id.","code":""},{"path":"https://agua.tidymodels.org/reference/h2o-server.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility functions for interacting with the h2o server — h2o_start","text":"","code":"if (FALSE) { if (!h2o_running()) {   h2o_start() } }"},{"path":"https://agua.tidymodels.org/reference/h2o-tuning-params.html","id":null,"dir":"Reference","previous_headings":"","what":"Tuning parameters in h2o — h2o_activation","title":"Tuning parameters in h2o — h2o_activation","text":"Tuning parameters h2o","code":""},{"path":"https://agua.tidymodels.org/reference/h2o-tuning-params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuning parameters in h2o — h2o_activation","text":"","code":"h2o_activation(values = values_h2o_activation)  h2o_split(values = values_h2o_split)"},{"path":"https://agua.tidymodels.org/reference/h2o-tuning-params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tuning parameters in h2o — h2o_activation","text":"","code":"h2o_activation() #> Activation function  (qualitative) #> 6 possible values include: #> 'Rectifier', 'RectifierWithDropout', 'Tanh', 'TanhWithDropout', 'Maxout..."},{"path":"https://agua.tidymodels.org/reference/h2o_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction wrappers for h2o — h2o_predict","title":"Prediction wrappers for h2o — h2o_predict","text":"Prediction wrappers fitted models h2o engine include data conversion, h2o server cleanup, .","code":""},{"path":"https://agua.tidymodels.org/reference/h2o_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction wrappers for h2o — h2o_predict","text":"","code":"h2o_predict(object, new_data, ...)  h2o_predict_classification(object, new_data, type = \"class\", ...)  h2o_predict_regression(object, new_data, type = \"numeric\", ...)  # S3 method for `_H2OAutoML` predict(object, new_data, id = NULL, ...)"},{"path":"https://agua.tidymodels.org/reference/h2o_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction wrappers for h2o — h2o_predict","text":"object object class model_fit. new_data rectangular data object, data frame. ... options passed h2o::h2o.predict() type single character value NULL. Possible values \"numeric\", \"class\", \"prob\", \"conf_int\", \"pred_int\", \"quantile\", \"time\", \"hazard\", \"survival\", \"raw\". NULL, predict() choose appropriate value based model's mode. id Model id AutoML results.","code":""},{"path":"https://agua.tidymodels.org/reference/h2o_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction wrappers for h2o — h2o_predict","text":"type != \"raw\", prediction data frame number rows new_data. type == \"raw\", return result h2o::h2o.predict().","code":""},{"path":"https://agua.tidymodels.org/reference/h2o_predict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prediction wrappers for h2o — h2o_predict","text":"AutoML, prediction based best performing model.","code":""},{"path":"https://agua.tidymodels.org/reference/h2o_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction wrappers for h2o — h2o_predict","text":"","code":"if (h2o_running()) {   spec <-     rand_forest(mtry = 3, trees = 100) %>%     set_engine(\"h2o\") %>%     set_mode(\"regression\")    set.seed(1)   mod <- fit(spec, mpg ~ ., data = mtcars)   h2o_predict_regression(mod$fit, new_data = head(mtcars), type = \"numeric\")    # using parsnip   predict(mod, new_data = head(mtcars)) }"},{"path":"https://agua.tidymodels.org/reference/h2o_train.html","id":null,"dir":"Reference","previous_headings":"","what":"Model wrappers for h2o — h2o_train","title":"Model wrappers for h2o — h2o_train","text":"Basic model wrappers h2o model functions include data conversion, seed configuration, .","code":""},{"path":"https://agua.tidymodels.org/reference/h2o_train.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model wrappers for h2o — h2o_train","text":"","code":"h2o_train(   x,   y,   model,   weights = NULL,   validation = NULL,   save_data = FALSE,   ... )  h2o_train_rf(x, y, ntrees = 50, mtries = -1, min_rows = 1, ...)  h2o_train_xgboost(   x,   y,   ntrees = 50,   max_depth = 6,   min_rows = 1,   learn_rate = 0.3,   sample_rate = 1,   col_sample_rate = 1,   min_split_improvement = 0,   stopping_rounds = 0,   validation = NULL,   ... )  h2o_train_gbm(   x,   y,   ntrees = 50,   max_depth = 6,   min_rows = 1,   learn_rate = 0.3,   sample_rate = 1,   col_sample_rate = 1,   min_split_improvement = 0,   stopping_rounds = 0,   ... )  h2o_train_glm(x, y, lambda = NULL, alpha = NULL, ...)  h2o_train_nb(x, y, laplace = 0, ...)  h2o_train_mlp(   x,   y,   hidden = 200,   l2 = 0,   hidden_dropout_ratios = 0,   epochs = 10,   activation = \"Rectifier\",   validation = NULL,   ... )  h2o_train_rule(   x,   y,   rule_generation_ntrees = 50,   max_rule_length = 5,   lambda = NULL,   ... )  h2o_train_auto(x, y, verbosity = NULL, save_data = FALSE, ...)"},{"path":"https://agua.tidymodels.org/reference/h2o_train.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model wrappers for h2o — h2o_train","text":"x data frame predictors. y vector outcomes. model character string model. Current selections \"automl\", \"randomForest\", \"xgboost\", \"gbm\", \"glm\", \"deeplearning\", \"rulefit\" \"naiveBayes\". Use h2o_xgboost_available() see xgboost can used OS/h2o server. weights numeric vector case weights. validation integer 0 1 specifying proportion data reserved validation set. used h2o performance assessment potential early stopping. Default 0. save_data logical whether training data saved h2o server, set TRUE AutoML models needs re-fitted. ... options pass h2o model functions (e.g., h2o::h2o.randomForest()). ntrees Number trees. Defaults 50. mtries Number variables randomly sampled candidates split. set -1, defaults sqrt{p} classification p/3 regression (p # predictors Defaults -1. min_rows Fewest allowed (weighted) observations leaf. Defaults 1. max_depth Maximum tree depth (0 unlimited). Defaults 20. learn_rate (eta) Learning rate (0.0 1.0) Defaults 0.3. sample_rate Row sample rate per tree (0.0 1.0) Defaults 0.632. col_sample_rate (colsample_bylevel) Column sample rate (0.0 1.0) Defaults 1. min_split_improvement Minimum relative improvement squared error reduction split happen Defaults 1e-05. stopping_rounds Early stopping based convergence stopping_metric. Stop simple moving average length k stopping_metric improve k:=stopping_rounds scoring events (0 disable) Defaults 0. lambda Regularization strength alpha Distribution regularization L1 (Lasso) L2 (Ridge) penalties. value 1 alpha represents Lasso regression, value 0 produces Ridge regression, anything specifies amount mixing two. Default value alpha 0 SOLVER = 'L-BFGS'; 0.5 otherwise. laplace Laplace smoothing parameter Defaults 0. hidden Hidden layer sizes (e.g. [100, 100]). Defaults c(200, 200). l2 L2 regularization (can add stability improve generalization, causes many weights small. Defaults 0. hidden_dropout_ratios Hidden layer dropout ratios (can improve generalization), specify one value per hidden layer, defaults 0.5. epochs many times dataset iterated (streamed), can fractional. Defaults 10. activation Activation function. Must one : \"Tanh\", \"TanhWithDropout\", \"Rectifier\", \"RectifierWithDropout\", \"Maxout\", \"MaxoutWithDropout\". Defaults Rectifier. rule_generation_ntrees Specifies number trees build tree model. Defaults 50. Defaults 50. max_rule_length Maximum length rules. Defaults 3. verbosity Verbosity backend messages printed training; Must one NULL (live log disabled), \"debug\", \"info\", \"warn\", \"error\". Defaults NULL.","code":""},{"path":"https://agua.tidymodels.org/reference/h2o_train.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model wrappers for h2o — h2o_train","text":"h2o model object.","code":""},{"path":"https://agua.tidymodels.org/reference/h2o_train.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model wrappers for h2o — h2o_train","text":"","code":"# start with h2o::h2o.init() if (h2o_running()) {  # -------------------------------------------------------------------------  # Using the model wrappers:  h2o_train_glm(mtcars[, -1], mtcars$mpg)   # -------------------------------------------------------------------------  # using parsnip:   spec <-    rand_forest(mtry = 3, trees = 500) %>%    set_engine(\"h2o\") %>%    set_mode(\"regression\")   set.seed(1)  mod <- fit(spec, mpg ~ ., data = mtcars)  mod   predict(mod, head(mtcars)) }"},{"path":"https://agua.tidymodels.org/reference/h2o_tune.html","id":null,"dir":"Reference","previous_headings":"","what":"Control model tuning via h2o::h2o.grid() — agua_backend_options","title":"Control model tuning via h2o::h2o.grid() — agua_backend_options","text":"Control model tuning via h2o::h2o.grid()","code":""},{"path":"https://agua.tidymodels.org/reference/h2o_tune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control model tuning via h2o::h2o.grid() — agua_backend_options","text":"","code":"agua_backend_options(parallelism = 1)"},{"path":"https://agua.tidymodels.org/reference/h2o_tune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control model tuning via h2o::h2o.grid() — agua_backend_options","text":"parallelism Level Parallelism grid model building. 1 = sequential building (default). Use value 0 adaptive parallelism - decided H2O. number > 1 sets exact number models built parallel.","code":""},{"path":"https://agua.tidymodels.org/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% generics rank_results, refit, refit, tidy ggplot2 autoplot hardhat extract_fit_engine, extract_fit_parsnip tibble as_tibble tune collect_metrics","code":""},{"path":"https://agua.tidymodels.org/news/index.html","id":"agua-014","dir":"Changelog","previous_headings":"","what":"agua 0.1.4","title":"agua 0.1.4","text":"CRAN release: 2024-06-04 bump tune version","code":""},{"path":"https://agua.tidymodels.org/news/index.html","id":"agua-013","dir":"Changelog","previous_headings":"","what":"agua 0.1.3","title":"agua 0.1.3","text":"CRAN release: 2023-06-03 h2o_start warnings java found typos","code":""},{"path":"https://agua.tidymodels.org/news/index.html","id":"agua-012","dir":"Changelog","previous_headings":"","what":"agua 0.1.2","title":"agua 0.1.2","text":"CRAN release: 2023-02-23","code":""},{"path":"https://agua.tidymodels.org/news/index.html","id":"agua-011","dir":"Changelog","previous_headings":"","what":"agua 0.1.1","title":"agua 0.1.1","text":"CRAN release: 2023-02-09 Fix CRAN warning","code":""},{"path":"https://agua.tidymodels.org/news/index.html","id":"agua-010","dir":"Changelog","previous_headings":"","what":"agua 0.1.0","title":"agua 0.1.0","text":"CRAN release: 2022-10-11 First full-featured release","code":""},{"path":"https://agua.tidymodels.org/news/index.html","id":"agua-001","dir":"Changelog","previous_headings":"","what":"agua 0.0.1","title":"agua 0.0.1","text":"CRAN release: 2022-06-02 Test release basic fitting functions","code":""}]
